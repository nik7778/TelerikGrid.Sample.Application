@using Kendo.Mvc.UI
@using Sample.Application.Entities

@model IEnumerable<Record>

@{
    ViewData["Title"] = "Grid Sample";
}

<style>
    fieldset {
        border: 1px #000 dashed;
        border-radius: 10px;
        margin-bottom: 5px;
    }

    legend {
        width: auto;
        padding-left: 2px;
        padding-right: 2px;
        font-size: 20px;
        font-weight: 500;
    }

    .demo-section label {
        display: block;
        margin: 15px 0 5px 0;
    }

    #get {
        float: right;
        margin: 25px auto 0;
    }

    .k-textbox-container{
        padding-top:0;
    }

    .demo-section {
        text-align: center;
    }

    .fieldlist {
        margin: 0 0 -1em;
        padding: 0;
    }

        .fieldlist li {
            list-style: none;
            padding-bottom: 1em;
        }

    #cap {
        width: 242px;
        height: 225px;
        margin: 20px auto;
        background-image: url('@Url.Content("~/shared/web/dropdownlist/cap.png")');
        background-repeat: no-repeat;
        background-color: transparent;
    }
    .black-cap {
        background-position: 0 0;
    }
    .grey-cap {
        background-position: 0 -225px;
    }
    .orange-cap {
        background-position: 0 -450px;
    }
    .k-detail-cell .k-tabstrip .k-content {
        padding: 0.2em;
    }

    .employee-details ul {
        list-style: none;
        font-style: italic;
        margin: 15px;
        padding: 0;
    }

        .employee-details ul li {
            margin: 0;
            line-height: 1.7em;
        }

    .employee-details label {
        display: inline-block;
        width: 90px;
        padding-right: 10px;
        text-align: right;
        font-style: normal;
        font-weight: bold;
    }
</style>

<form class="mainFilter" id="filters">
    <fieldset>
        <legend class="filter">Filters</legend>
        <div class="row" style="padding:15px 0px;">
            <div class="col-md-6" style="display: inline-block;">
                <div style="display: inline-block;">
                    <label style="display:inline-block; margin-left:25px;">Date Range:</label>
                    <div class="demo-section k-content wide" style="display: inline-block;">
                        @(Html.Kendo().DateRangePicker()
                        .Name("daterangepicker")
                        //.Events(e => e.Change("filterByDate"))
                        .Labels(false)
                        .HtmlAttributes(new { style = "width: 360", title = "daterangepicker" })
                        )
                    </div>
                </div>
            </div>
            <div class="col-md-6" style="text-align: center; display: inline-block;">
                <div style="display:inline-block;">
                    <ul class="fieldlist">
                        <li>
                            @(Html.Kendo().CheckBox()
                            .Name("eq1")
                            .Checked(false).Label("DNB Only"))
                        </li>
                    </ul>
                </div>
                <label style="display:inline-block; margin-left:25px;">Status:</label>
                <div class="demo-section k-content center" style="display:inline-block;">
                    @(Html.Kendo().ButtonGroup()
                           .Name("selectColor")
                           .Items(t =>
                           {
                               t.Add().Text("Red");
                               t.Add().Text("Yellow");
                               t.Add().Text("Green");
                           })
                     )
                </div>
                <label style="display:inline-block; margin-left:10px;">Staff:</label>
                <div class="demo-section k-content center" style="display:inline-block;">
                    @(Html.Kendo().DropDownList()
                      .Name("staff")
                      .DataTextField("Text")
                      .DataValueField("Value")
                      //.Events(e => e.Change("staffChange"))
                      .BindTo(ViewBag.Staff)
                      .HtmlAttributes(new { style = "max-width: 100px" })
                    )
                </div>
            </div>
        </div>
        <div class="row" style="padding:15px 0px;">
            <div class="col-md-9">
                <div class="demo-section k-content center" style="margin-left:25px;display:inline-block;width:700px;">
                    @(Html.Kendo().MultiSelect()
                        .Name("select")
                        //.Events(e => e.Change("selectChange"))
                        .AutoClose(false)
                        .Placeholder("Select a Client...")
                        .HtmlAttributes(new { style = "min-width: 400px" })
                        .BindTo(ViewBag.Clients)
                    )
                </div>
            </div>
            <div class="col-md-3">
                @(Html.Kendo().Button()
                    .Name("applyFilters")
                    .HtmlAttributes(new { type = "button", @class = "k-primary", style="float:left;" })
                    .Content("Apply filters"))
                @(Html.Kendo().Button()
                    .Name("clearFilters")
                    .HtmlAttributes(new { type = "button", @class = "k-primary", style="float:left; margin-left:10px;" })
                    .Content("Clear all filters"))
            </div>
        </div>
    </fieldset>
</form>

@(Html.Kendo().Grid<Record>()
    .Name("Grid1")
    .DataSource(dataSource => dataSource
                .Ajax()
                .Batch(true)
                .PageSize(50)
                .ServerOperation(false)
                .Events(events => events.Error("error_handler"))
                .Read(read => read.Action("Record_Read", "Home"))
                .Update(read => read.Action("Record_Update", "Home"))
                .Destroy(read => read.Action("Record_Destroy", "Home"))
    )
    .ToolBar(toolbar =>
    {
        toolbar.Search();
        toolbar.Save();        
        toolbar.Pdf();
    })
    .Columns(columns =>
    {
        columns.Bound(p => p.Date).Format("{0: MM-dd-yyyy}").Width(90);
        columns.Bound(p => p.Day).Width(60);
        columns.Bound(p => p.Time).Width(70);
        columns.Bound(p => p.Client).Width(70);
        columns.Bound(p => p.Duration).Width(90);
        columns.Bound(p => p.DNB).Width(65);
        columns.Bound(p => p.Status).Width(70);
        columns.Bound(p => p.Memo).Width(300);
        columns.Bound(p => p.Staff).Width(65);
        columns.Command(command => command.Destroy()).Width(80);
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable(pager => pager.Refresh(true))
    .Navigatable()
    .Sortable()
    .Resizable(resize => resize.Columns(true))
    .Filterable()
    .Groupable()
    .Scrollable()
    .ClientDetailTemplateId("template")
    .HtmlAttributes(new { style = "height:1200px;" })
)

<script id="GridToolbarTemplate" type="text/x-kendo-template">
    <div class="refreshBtnContainer">
        <a id="btnRefresh" href="\\#" class="k-pager-refresh k-link k-button k-button-icon" title="Refresh"><span class="k-icon k-i-reload"></span></a>
    </div>
</script>

<script id="template" type="text/kendo-tmpl">
    @(Html.Kendo().TabStrip()
      .Name("tabStrip_#=Date#_#=Time#")
      .SelectedIndex(0)
      .Animation(animation => animation.Open(open => open.Fade(FadeDirection.In)))
      .Items(items =>
      {        
          items.Add().Text("Details").Content(
         "<div class='employee-details'>" +
             "<ul>" +
                 "<li><label>Date:</label>#= Date #</li>" +
                 "<li><label>Day:</label>#= Day #</li>" +
                 "<li><label>Time:</label>#= Time #</li>" +
                 "<li><label>Client:</label>#= Client #<li>" +
                 "<li><label>Duration:</label>#= Duration #<li>" +
                 "<li><label>DNB:</label>#= DNB #<li>" +
                 "<li><label>Status:</label>#= Status #<li>" +
                 "<li><label>Memo:</label>#= Memo #<li>" +
                 "<li><label>Staff:</label>#= Staff #<li>" +
             "</ul>" +
         "</div>"
     );
}).ToClientTemplate())
</script>

<script type="text/javascript">
    $(document).ready(function () {
        var grid = $("#Grid1").data("kendoGrid");
        var dataSource = grid.dataSource;

        //records on current view / page
        var recordsOnCurrentView = dataSource.view().length;
        //total records
        var totalRecords = dataSource.total();

        $(".k-pager-refresh").on("click", function () {
            var grid = $("#Grid1").data("kendoGrid");

            if (grid) {
                grid.dataSource.filter({});
            }
            return false;
        });


        $("#applyFilters").on("click", function () {
            filterGrid();
            return false;
        });

        $("#clearFilters").on("click", function () {
            document.getElementById("filters").reset();
            $("#selectColor span").removeClass("k-state-active");
            var grid = $("#Grid1").data("kendoGrid");

            if (grid) {
                grid.dataSource.filter({});
                //grid.dataSource.read();
            }

            return false;
        });

        //$("#SearchBox").on("change", function () {
        //    var enter = $("#SearchBox").val();
        //    if (enter.length >= 3) {
        //        refreshGridSource();
        //    }
        //    return false;
        //});

        //$("#eq1").on("change", function () {
        //    dnbChange();
        //    return false;
        //});

        //$("#selectColor").on("click", function () {
        //    colorChange();
        //    return false;
        //});
    });

    function dataBound() {
        this.expandRow(this.tbody.find("tr.k-master-row").first());
    }

    function filterGrid() {
        var grid = $("#Grid1").data("kendoGrid"), i;
        var allFilters = { logic: "and", filters: [] };

        //datepicker
        var dateRange = new Array();
        $(".k-dateinput input").each(function () {
            if ($(this).val() !== 'month/day/year') {
                dateRange.push($(this).val());
            }
        });

        if (dateRange.length >= 2) {
            allFilters.filters.push({ field: "Date", operator: "gte", value: new Date(dateRange[0]) });
            allFilters.filters.push({ field: "Date", operator: "lte", value: new Date(dateRange[1]) });
        }

        //multiselect
        var selectArray = new Array();
        $(".k-multiselect span[unselectable='on']").each(function () {
            if ($(this).text())
                selectArray.push($(this).text());
        });

        if (selectArray.length > 0) {
            var filter = { logic: "or", filters: [] };
            for (i = 0; i < selectArray.length; i++) {
                filter.filters.push({ field: "Client", operator: "eq", value: selectArray[i] });
            }
            allFilters.filters.push(filter);
        }

        //checkbox
        var value = false;
        if ($('#eq1').is(":checked")) {
            value = true;
        }

        if (value) {
            allFilters.filters.push({ field: "DNB", operator: "eq", value: value });
        }

        //staff change
        var value = $(".k-dropdown-wrap span[unselectable='on']").text();

        if (value) {
            allFilters.filters.push({ field: "Staff", operator: "eq", value: value });
        }

        //status
        var value = $("span.k-state-active").text();
        if (value) {
            allFilters.filters.push({ field: "Status", operator: "eq", value: value });
        }

        if (allFilters.filters.length > 0) {
            grid.dataSource.filter(allFilters);
        }
        else {
            grid.dataSource.filter({});
        }
    }

    function change() {
        var value = $("#staff").val();
        $("#cap")
            .toggleClass("black-cap", value == 1)
            .toggleClass("orange-cap", value == 2)
            .toggleClass("grey-cap", value == 3);
    };

    function refreshGridSource() {
        var filter = new Array();
        var strFilter = $("#SearchBox").val();
        var gridData = $("#Grid1").data("kendoGrid");

        if (strFilter.length > 0) {
            filter.push({ field: "Memo", operator: "contains", value: strFilter });
            gridData.dataSource.filter(filter);
        }
        else {
            gridData.dataSource.filter({});
        }
    };

    function error_handler(e) {
        if (e.errors) {
            var message = "Errors:\n";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "\n";
                    });
                }
            });
            alert(message);
        }
    }

    //function staffChange() {
    //    var value = this.value(),
    //        grid = $("#Grid1").data("kendoGrid");

    //    if (value) {
    //        grid.dataSource.filter({ field: "Staff", operator: "eq", value: value });
    //    } else {
    //        grid.dataSource.filter({});
    //    }
    //}

    //function dnbChange() {
    //    var grid = $("#Grid1").data("kendoGrid");
    //    var value = false;
    //    if ($('#eq1').is(":checked")) {
    //        value = true;
    //    }

    //    if (value) {
    //        grid.dataSource.filter({ field: "DNB", operator: "eq", value: value });
    //    } else {
    //        grid.dataSource.filter({});
    //    }
    //}

    //function colorChange() {
    //    var grid = $("#Grid1").data("kendoGrid");
    //    var value = $("span.k-state-active").text();
    //    if (value) {
    //        grid.dataSource.filter({ field: "Status", operator: "eq", value: value });
    //    } else {
    //        grid.dataSource.filter({});
    //    }
    //}

    //function selectChange() {
    //    var value = this.value(), i;
    //    var grid = $("#Grid1").data("kendoGrid");

    //    if (value.length > 0) {
    //        for (i = 0; i < value.length; i++) {
    //            grid.dataSource.filter({ field: "Client", operator: "eq", value: value[i] });
    //        }
    //    } else {
    //        grid.dataSource.filter({});
    //    }
    //}

    //function filterByDate() {
    //    var range = new Array();
    //    $(".k-dateinput input").each(function () {
    //        range.push($(this).val());
    //    });
    //    var grid = $("#Grid1").data("kendoGrid");

    //    if (range.length >= 2) {
    //        var filter = { logic: "and", filters: [] };
    //        filter.filters.push({ field: "Date", operator: "gte", value: range[0] });
    //        filter.filters.push({ field: "Date", operator: "lte", value: range[1] });
    //        grid.dataSource.filter(filter);
    //    }
    //    else {
    //        grid.dataSource.filter({});
    //    }
    //}   
</script>
